<?php

namespace Modula\Framework;

class ClassLoader {

    private static $_instance;
    private $include_paths = array(dir_LIBS, dir_MODULES);

    public static function getInstance() {
        if (!self::$_instance) {
            self::$_instance = new ClassLoader();
        }
        return self::$_instance;
    }

    private function __construct() {
        // Do nothing
    }

    /**
     * Add a new include path to search.
     *
     * @param string $path
     */
    public function addIncludePath($path) {
        $this->include_paths[] = $path;
    }

    /**
     * Directly require a php file, mostly used for future proofing.
     *
     * @param string $path
     */
    public function load($path) {
        $file = dir_ROOT . '/' . str_replace('.', '/', $path) . '.php';
        if (file_exists($file)) {
            require($file);
        }
    }

    /**
     * Loads the required class from cache, creating a cache file if one
     * doesn't already exist.
     *
     * @param string $class
     * @return bool
     */
    public function autoLoad($class) {
        // Only auto load when within the Modula namespace
        if (preg_match('/^Modula\\\.*$/', $class)) {
            $cachefile = dir_CACHE . '/classes/' . str_replace('\\', '_', $class) . '.php';
            if (!file_exists($cachefile)) {
                $classfile = $this->findClassFile($class);
                if ($classfile) {
                    $date = date(DATE_RFC822);
                    file_put_contents($cachefile, "<?php\n\n  // Generated by classloader.php - $date\n  require('$classfile');\n\n?>");
                } else {
                    return false;
                }
            }
            require($cachefile);
            return true;
        }
    }

    /**
     * Search through the list of include paths for the required class file,
     * making sure that the correct namespace is defined in the class file.
     *
     * @param string $class
     * @return string
     */
    public function findClassFile($class) {
        $classname = preg_replace('/.*\\\/', '', $class);
        $namespace = preg_replace('/\\\\[a-z]*$/i', '', $class);

        foreach ($this->include_paths as $dir) {
            foreach (new \recursiveIteratorIterator(new \recursiveDirectoryIterator($dir)) as $file) {
                $info = pathinfo($file);
                if ($info['extension'] == 'php') {
                    $data = file_get_contents($file);
                    if (preg_match('/\<\?php.*namespace\s+' . str_replace('\\', '\\\\', $namespace) . ';.*(class|interface)\s+' . $classname . '\s+/is', $data)) {
                        return $file;
                    }
                }
            }
        }
        return false;
    }

}

?>